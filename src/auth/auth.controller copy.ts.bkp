import { Body, Controller, Get, Param, Post, Req, Request, Res, Response, UseGuards } from '@nestjs/common';

import { AuthService } from './auth.service';
import { AuthLoginDto } from './dto/auth-login.dto';
import { JwtAuthGuard } from './jwt-auth.guard';
import { ExtractJwt } from 'passport-jwt';
import TokenPayload from './tokenPayload.interface';

@Controller('auth')
export class AuthController {
  constructor(private readonly authService: AuthService) { }

  @Post()
  async login(@Body() authLoginDto: AuthLoginDto) {
    return this.authService.login(authLoginDto);
  }

  @UseGuards(JwtAuthGuard)
  @Get()
  async test(@Request() req) {
    const bearerHeader = req.headers.authorization;
    const token = bearerHeader.replace('Bearer ', '');
    return this.authService.getUserFromAuthenticationToken(token);
  }

  @UseGuards(JwtAuthGuard)
  @Post('log-out')
  async logOut(@Request() request: TokenPayload, @Response() response) {
    response.setHeader('Set-Cookie', this.authService.getCookieForLogOut());
    return response.sendStatus(200);
  }
}
